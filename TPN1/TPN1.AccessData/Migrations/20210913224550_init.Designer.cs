// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPN1.AccessData;

namespace TPN1.AccessData.Migrations
{
    [DbContext(typeof(CineContext))]
    [Migration("20210913224550_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TPN1.Domain.Entities.Funciones", b =>
                {
                    b.Property<int>("FuncionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Horario")
                        .HasColumnType("time");

                    b.Property<int>("PeliculaId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("PeliculasNavigatorPeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("SalasNavigatorSalaId")
                        .HasColumnType("int");

                    b.HasKey("FuncionId");

                    b.HasIndex("PeliculasNavigatorPeliculaId");

                    b.HasIndex("SalasNavigatorSalaId");

                    b.ToTable("Funciones");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Peliculas", b =>
                {
                    b.Property<int>("PeliculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PeliculaId");

                    b.ToTable("Peliculas");

                    b.HasData(
                        new
                        {
                            PeliculaId = 1,
                            Poster = "https://es.web.img3.acsta.net/c_310_420/medias/nmedia/18/71/18/12/20061511.jpg",
                            Sinopsis = "Sinopsis 1",
                            Titulo = "Star Wars: episodio IV - una nueva esperanza",
                            Trailer = "Trailer 1"
                        },
                        new
                        {
                            PeliculaId = 2,
                            Poster = "Poster 2",
                            Sinopsis = "Sinopsis 2",
                            Titulo = "El imperio contraataca",
                            Trailer = "Trailer 2"
                        },
                        new
                        {
                            PeliculaId = 3,
                            Poster = "Poster 3",
                            Sinopsis = "Sinopsis 3",
                            Titulo = "Star Wars: episodio VI - el retorno del Jedi",
                            Trailer = "Trailer 3"
                        },
                        new
                        {
                            PeliculaId = 4,
                            Poster = "Poster 4",
                            Sinopsis = "Sinopsis 4",
                            Titulo = "Star Wars: episodio I - la amenaza fantasma",
                            Trailer = "Trailer 4"
                        },
                        new
                        {
                            PeliculaId = 5,
                            Poster = "Poster 5",
                            Sinopsis = "Sinopsis 5",
                            Titulo = "Star Wars: episodio II - el ataque de los clones",
                            Trailer = "Trailer 5"
                        },
                        new
                        {
                            PeliculaId = 6,
                            Poster = "Poster 1",
                            Sinopsis = "Sinopsis 1",
                            Titulo = "Star wars: episodio III - la venganza de los sith",
                            Trailer = "Trailer 1"
                        },
                        new
                        {
                            PeliculaId = 7,
                            Poster = "Poster 2",
                            Sinopsis = "Sinopsis 2",
                            Titulo = "Star Wars: el despertar de la fuerza",
                            Trailer = "Trailer 2"
                        },
                        new
                        {
                            PeliculaId = 8,
                            Poster = "Poster 3",
                            Sinopsis = "Sinopsis 3",
                            Titulo = "Star Wars: Episodio VIII",
                            Trailer = "Trailer 3"
                        },
                        new
                        {
                            PeliculaId = 9,
                            Poster = "Poster 4",
                            Sinopsis = "Sinopsis 4",
                            Titulo = "Star Wars: Episodio IX",
                            Trailer = "Trailer 4"
                        },
                        new
                        {
                            PeliculaId = 10,
                            Poster = "Poster 5",
                            Sinopsis = "Sinopsis 5",
                            Titulo = "Rogue One: una historia de Star Wars",
                            Trailer = "Trailer 5"
                        });
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Salas", b =>
                {
                    b.Property<int>("SalaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacidad")
                        .HasMaxLength(35)
                        .HasColumnType("int");

                    b.HasKey("SalaId");

                    b.ToTable("Salas");

                    b.HasData(
                        new
                        {
                            SalaId = 1,
                            Capacidad = 5
                        },
                        new
                        {
                            SalaId = 2,
                            Capacidad = 15
                        },
                        new
                        {
                            SalaId = 3,
                            Capacidad = 35
                        });
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Tickets", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FuncionId")
                        .HasColumnType("int");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketId", "FuncionId");

                    b.HasIndex("FuncionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Funciones", b =>
                {
                    b.HasOne("TPN1.Domain.Entities.Peliculas", "PeliculasNavigator")
                        .WithMany("FuncionesNavigator")
                        .HasForeignKey("PeliculasNavigatorPeliculaId");

                    b.HasOne("TPN1.Domain.Entities.Salas", "SalasNavigator")
                        .WithMany("FuncionesNavigator")
                        .HasForeignKey("SalasNavigatorSalaId");

                    b.Navigation("PeliculasNavigator");

                    b.Navigation("SalasNavigator");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Tickets", b =>
                {
                    b.HasOne("TPN1.Domain.Entities.Funciones", "FuncionesNavigator")
                        .WithMany("TicketsNavigator")
                        .HasForeignKey("FuncionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuncionesNavigator");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Funciones", b =>
                {
                    b.Navigation("TicketsNavigator");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Peliculas", b =>
                {
                    b.Navigation("FuncionesNavigator");
                });

            modelBuilder.Entity("TPN1.Domain.Entities.Salas", b =>
                {
                    b.Navigation("FuncionesNavigator");
                });
#pragma warning restore 612, 618
        }
    }
}
